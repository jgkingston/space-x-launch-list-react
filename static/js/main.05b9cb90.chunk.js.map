{"version":3,"sources":["api.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["handleResponse","response","json","getLaunches","params","queryString","Object","keys","map","key","join","getQueryString","fetch","concat","then","initialQuery","limit","offset","order","sort","App","_useState","useState","_useState2","slicedToArray","launches","setLaunches","_useState3","_useState4","isLoading","setLoading","_useState5","undefined","_useState6","max","setMax","_useState7","_useState8","query","setQuery","handleOffset","prevState","objectSpread","useEffect","result","length","react_default","a","createElement","Fragment","style","backgroundColor","padding","href","target","src","fontSize","fontWeight","textTransform","boxShadow","className","onClick","launch","flight_number","links","presskit","data-href","event","location","currentTarget","getAttribute","window","open","launch_year","rocket","rocket_name","details","colSpan","disabled","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.05b9cb90.chunk.js","sourcesContent":["import { QueryHash } from './types';\n\nconst getQueryString = (params: QueryHash) => Object.keys(params)\n    .map(key => key + '=' + params[key])\n    .join('&');\nconst handleResponse = (response: Response) => response.json();\n\nexport const getLaunches = (params: QueryHash) => {\n  const queryString = getQueryString(params);\n  return fetch(`https://api.spacexdata.com/v3/launches?${queryString}`)\n    .then(handleResponse);\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { getLaunches } from './api';\nimport './App.css';\nimport { QueryHash, Launch } from './types';\n\nconst initialQuery: QueryHash = {\n  limit: 10,\n  offset: 0,\n  order: 'asc',\n  sort: 'flight_number',\n}\n\nconst App = () => {\n  const [launches, setLaunches] = useState<Launch[]>([])\n  const [isLoading, setLoading] = useState(false);\n  const [max, setMax] = useState<number | undefined>(undefined);\n  const [query, setQuery] = useState<QueryHash>(initialQuery)\n\n  useEffect(() => {\n    setLoading(true);\n    getLaunches(query).then((result: Launch[]) => {\n      setLaunches(result)\n      setLoading(false);\n      if (result.length < 10) {\n        setMax(query.offset + result.length)\n      }\n    })\n  }, [query.offset, query.order]);\n\n  function handleOffset(offset: number) {\n    setQuery((prevState) => ({\n      ...prevState,\n      offset,\n    }))\n  }\n\n  function toggleOrder() {\n    setQuery((prevState) => ({\n      ...prevState,\n      order:  prevState.order === 'asc'\n        ? 'desc'\n        : 'asc',\n    }))\n  }\n\n  return (\n    <>\n      <header\n        style={{\n          backgroundColor: '#0b0b0b',\n          padding: 16,\n        }}\n      >\n        <a\n          href=\"https://www.spacex.com/\"\n          target=\"_blank\"\n        >\n          <img src=\"./spacex_logo_white.png\" />\n        </a>\n      </header>\n      <main\n        style={{\n          backgroundColor: '#eee',\n          padding: 16,\n        }}\n      >\n        <h1\n          style={{\n            fontSize: 30,\n            fontWeight: 500,\n            textTransform: 'uppercase',\n          }}\n        >\n          Launches\n        </h1>\n        <div\n          style={{\n            boxShadow: '0 2px 5px 0 rgba(0,0,0,0.25',\n            backgroundColor: '#FFF',\n          }}\n        >\n          <table>\n            <thead>\n              <tr>\n                <th\n                  className=\"row-flight-number\"\n                >\n                  <a\n                    className=\"sort-by\"\n                    onClick={toggleOrder}\n                  >\n                    Flight Number\n                  </a>\n                </th>\n                <th>\n                  Launch Year\n                </th>\n                <th>\n                  Rocket Name\n                </th>\n                <th\n                  className=\"row-details\"\n                >\n                  Details\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              { launches.map((launch) => (\n                <tr\n                  key={launch.flight_number}\n                  className={!!launch.links.presskit ? 'clickable-row': undefined}\n                  data-href={launch.links.presskit}\n                  onClick={(event) => {\n                    const location = event.currentTarget.getAttribute('data-href');\n                    if (!!location) {\n                      window.open(location);\n                    }\n                  }}\n                >\n                  <td>\n                    {launch.flight_number}\n                  </td>\n                  <td>\n                    {launch.launch_year}\n                  </td>\n                  <td>\n                    {launch.rocket.rocket_name}\n                  </td>\n                  <td>\n                    {launch.details}\n                  </td>\n                </tr>\n              )) }\n            </tbody>\n            <tfoot>\n                <tr>\n                  <td\n                    colSpan={4}\n                  >\n                    <div\n                      className=\"pagination\"\n                    >\n                      <button\n                        disabled={isLoading || query.offset < query.limit}\n                        onClick={() => handleOffset(query.offset - query.limit)}\n                      >\n                        Previous\n                      </button>\n                      <button\n                        disabled={isLoading || !!max && query.offset >= max - query.limit}\n                        onClick={() => handleOffset(query.offset + query.limit)}\n                      >\n                        Next\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n            </tfoot>\n          </table>\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}