{"version":3,"sources":["api.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["handleResponse","response","json","getLaunches","params","queryString","Object","keys","map","key","join","getQueryString","fetch","concat","then","initialQuery","limit","offset","order","sort","App","_useState","useState","_useState2","slicedToArray","launches","setLaunches","_useState3","undefined","_useState4","max","setMax","_useState5","_useState6","query","setQuery","handleOffset","prevState","objectSpread","useEffect","result","length","react_default","a","createElement","style","padding","borderRadius","boxShadow","overflowY","className","onClick","launch","flight_number","links","presskit","data-href","event","location","currentTarget","getAttribute","window","open","launch_year","rocket","rocket_name","details","colSpan","disabled","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4183dfbe.chunk.js","sourcesContent":["import { QueryHash } from './types';\n\nconst getQueryString = (params: QueryHash) => Object.keys(params)\n    .map(key => key + '=' + params[key])\n    .join('&');\nconst handleResponse = (response: Response) => response.json();\n\nexport const getLaunches = (params: QueryHash) => {\n  const queryString = getQueryString(params);\n  return fetch(`https://api.spacexdata.com/v3/launches?${queryString}`)\n    .then(handleResponse);\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { getLaunches } from './api';\nimport './App.css';\nimport { QueryHash, Launch } from './types';\n\nconst initialQuery: QueryHash = {\n  limit: 10,\n  offset: 0,\n  order: 'asc',\n  sort: 'flight_number',\n}\n\nconst App = () => {\n  const [launches, setLaunches] = useState<Launch[]>([])\n  const [max, setMax] = useState<number | undefined>(undefined);\n  const [query, setQuery] = useState<QueryHash>(initialQuery)\n\n  useEffect(() => {\n    getLaunches(query).then((result: Launch[]) => {\n      setLaunches(result)\n      if (result.length < 10) {\n        setMax(query.offset + result.length)\n      }\n    })\n  }, [query.offset, query.order]);\n\n  function handleOffset(offset: number) {\n    setQuery((prevState) => ({\n      ...prevState,\n      offset,\n    }))\n  }\n\n  function toggleOrder() {\n    setQuery((prevState) => ({\n      ...prevState,\n      order:  prevState.order === 'asc'\n        ? 'desc'\n        : 'asc',\n    }))\n  }\n\n  return (\n    <div\n      style={{\n        padding: 16,\n      }}\n    >\n      <div\n        style={{\n          borderRadius: 4,\n          boxShadow: '0px 1px 3px 0px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 2px 1px -1px rgba(0,0,0,0.12)',\n          overflowY: 'scroll',\n        }}\n      >\n        <table>\n          <thead>\n            <tr>\n              <th\n                className=\"row-flight-number\"\n              >\n                <a\n                  className=\"sort-by\"\n                  onClick={toggleOrder}\n                >\n                  Flight Number\n                </a>\n              </th>\n              <th>\n                Launch Year\n              </th>\n              <th>\n                Rocket Name\n              </th>\n              <th\n                className=\"row-details\"\n              >\n                Details\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            { launches.map((launch) => (\n              <tr\n                key={launch.flight_number}\n                className={!!launch.links.presskit ? 'clickable-row': undefined}\n                data-href={launch.links.presskit}\n                onClick={(event) => {\n                  const location = event.currentTarget.getAttribute('data-href');\n                  if (!!location) {\n                    window.open(location);\n                  }\n                }}\n              >\n                <td>\n                  {launch.flight_number}\n                </td>\n                <td>\n                  {launch.launch_year}\n                </td>\n                <td>\n                  {launch.rocket.rocket_name}\n                </td>\n                <td>\n                  {launch.details}\n                </td>\n              </tr>\n            )) }\n          </tbody>\n          <tfoot>\n              <tr>\n                <td\n                  colSpan={4}\n                >\n                  <div\n                    className=\"pagination\"\n                  >\n                    <button\n                      disabled={query.offset < query.limit}\n                      onClick={() => handleOffset(query.offset - query.limit)}\n                    >\n                      Previous\n                    </button>\n                    <button\n                      disabled={!!max && query.offset >= max - query.limit}\n                      onClick={() => handleOffset(query.offset + query.limit)}\n                    >\n                      Next\n                    </button>\n                  </div>\n                </td>\n              </tr>\n          </tfoot>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}